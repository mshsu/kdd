# Martin Hsu - mshsu@calpoly.edu
# Lana Huynh - lmhuynh@calpoly.edu

import pandas as pd
import numpy as np
import sys
import json

from typing import Tuple


def read_files(f1: str, f2: str) -> Tuple[pd.DataFrame, dict, str]:
    """
    Reads in decision tree and file of records to be classified.

    :param f1: JSON description of a decision tree
    :param f2: CSV file of records to be classified
    :return: dataframe of records, decision tree, and class variable
    """
    raw = pd.read_csv(f1, skiprows=[1], header=0)
    classvar = raw.iloc[0, 0]
    df = raw.drop(0, axis=0)

    with open(f2) as f:
        tree = json.load(f)

    return df, tree, classvar


def search_tree(row: pd.Series, tree: dict) -> str:
    """
    Recursively searches our tree until we hit a leaf.

    :param row: row of dataframe
    :param tree: decision tree
    :return: decision generated from our tree
    """
    subtree = tree
    while "leaf" not in subtree.keys():
        node = subtree["node"]
        label = row[node['var']]
        for edge in node["edges"]:
            if edge['edge']['value'] == label:
                subtree = edge['edge']
    return subtree['leaf']['decision']


def predict(df: pd.DataFrame, tree: dict) -> pd.DataFrame:
    """
    Predicts all of the records to be classified using the decision tree.

    :param df: records to be classified
    :param tree: decision tree
    :return: original records enriched with all of the decisions generated by
        the decision tree
    """
    df['pred'] = df.apply(lambda row: search_tree(row, tree), axis=1)
    return df


def report(df: pd.DataFrame, obs_col: str, pred_col: str) -> dict:
    """
    Takes our observed and predicted values to produce a report. 

    :param df: dataframe of original data enriched with decision tree
        predictions
    :param obs_col: column name of correct decision in df
    :param pred_col: column name of predicted decision using our decision tree
        in df
    :return: reports total number of records classified,
      correctly/incorrectly classified, overall accuracy and
      error rate
    """
    obs = df[obs_col]
    pred = df[pred_col]
    rep = pd.DataFrame({"obs": obs, "pred": pred})
    rep['correct'] = (rep["obs"] == rep["pred"])

    num_records = len(rep)
    try:
        num_correct = rep["correct"].value_counts()[True]
    except KeyError:
        num_correct = 0
    num_incorrect = num_records - num_correct
    accuracy = (num_correct / num_records)
    error_rate = 1 - accuracy

    conf_matrix = pd.crosstab(rep['pred'], rep['obs'])
    conf_matrix = conf_matrix.reindex(columns=conf_matrix.columns,
                                      index=conf_matrix.columns,
                                      fill_value=0) \
        .rename_axis("pred", axis=0)

    tp = pd.Series(np.diag(conf_matrix))
    tp.index = conf_matrix.columns
    tp_fp = conf_matrix.sum(axis=1)
    tp_fn = conf_matrix.sum(axis=0)
    fp = tp_fp - tp
    tn = tp.sum() - tp

    precision = tp.divide(tp_fp).fillna(1)
    recall = tp.divide(tp_fn).fillna(1)
    pf = fp.divide(fp + tn).fillna(1)
    f_measure = 2 * precision * recall / (precision + recall)

    return {
        "df": df,
        "pred_col": pred_col,
        "obs_col": obs_col,
        "conf_matrix": conf_matrix,
        "n": num_records,
        "n_correct": num_correct,
        "n_incorrect": num_incorrect,
        "accuracy": accuracy,
        "error_rate": error_rate,
        "precision": precision,
        "recall": recall,
        "pf": pf,
        "f": f_measure
    }


def main():
    args = sys.argv

    output = True
    if "--nooutput" in args:
        output = False
        args.remove("--nooutput")
    # Don't print tree to console if --noprint specified
    printout = True
    if "--noprint" in args:
        printout = False
        args.remove("--noprint")
    # Simple output, just a csv file of predictions
    test = False
    if "--test" in args:
        test = True
        args.remove("--test")

    if len(args) < 3:
        print("Syntax: python3 classify.py <CSVFile.csv> <JSONFile.json> "
              "[--test] [--nooutput] [--noprint]")
    else:
        treepath = args[2].strip("'").strip('"')
        dfpath = args[1].strip("'").strip('"')

        treename = treepath.split("/")[-1]
        dfname = dfpath.split("/")[-1]

        df, tree, classvar = read_files(dfpath, treepath)

        pred = predict(df, tree)
        counts = pred['pred'].value_counts()
        counts.index.name = "Class Label Frequencies:"

        report_text = (f"Data: {dfname}\nTree: {treename}"
                       f"\n\n" + counts.to_string() +
                       f"\n\nRecords Classified: {len(pred.index)}")
        if not test:
            results = report(pred, classvar, "pred")

            report_text = (f"Martin Hsu - mshsu@calpoly.edu\n"
                           f"Lana Huynh - lmhuynh@calpoly.edu\n\n"
                           f"Data: {dfname}\nTree: {treename}\n"
                           f"Class Attribute: {classvar}\n"
                           f"\nConfusion Matrix:"
                           f"\n" + results['conf_matrix'].to_string() +
                           f"\n\nRecords Classified: {results['n']}"
                           f"\nRecords Correctly Classified: "
                           f"{results['n_correct']}"
                           f"\nRecords Incorrectly Classified: "
                           f"{results['n_incorrect']}"
                           f"\nOverall Accuracy: {results['accuracy']:0.3f}"
                           f"\nOverall Error Rate: "
                           f"{results['error_rate']:0.3f}\n")

        if printout:
            print(report_text)

        if output:
            prefix = treepath.split("_")[0]
            pred.to_csv(prefix + "_predict.csv")
            reportpath = prefix + "_report.out"
            with open(reportpath, 'w') as report_file:
                report_file.write(report_text)


if __name__ == "__main__":
    main()
